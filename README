The inference tool based on IHPMC is written in Haskell and there is a Cabal package file. You can build the package with:

    cabal install ihpmc.cabal

There are also binary Linux executables in "bin".

The algorithm comes with two version "ihpmc_float" and "ihpmc_exact". The former uses floating point arithmetic and the latter exact rational number arithmetic to compute probabilities. Floating point arithmetic is usually the better choice. It is more efficient, but can result in rounding errors. However, those rounding errors usually only become problematic, when conditioning on events with very small probability. Note, that even when using "ihpmc_exact" rounding error occur when computing CDF values for distributions employed.

The models used for the experiments of the paper "Approximate Probabilistic Inference with Bounded Error for Hybrid Probabilistic Logic Programming" are included in "examples". You can run the model for instance with:

    ./dist/build/ihpmc_float/ihpmc_float examples/diagnostic_10_01_30.pclp -i 10000

or, in case you want to use the pre-compiled executable:

    bin/ihpmc_float examples/diagnostic_10_01_30.pclp -i 10000

This will compute the result for 100000 iterations. The expected output is:

    Stopping after 10000 iterations.
    iteration 10000: 0.3884685469174709 (error bound: 0.08105175979731041)

Instead of the number of iterations, it is also possible to specify a timeout (-t) or a maximal allowed error (-e) as stop condition. The conditions can also be combined. For instance, with the following options inference will stop after 2000 iterations, after 1000ms or if the maximal error of the approximation is at most 0.01 (whatever occurs first):

    ihpmc_float examples/diagnostic_10_01_30.pclp -i 2000 -t 1000 -e 0.01

